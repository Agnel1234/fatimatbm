<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbJEwAHSRMAB0kTB4dJExEGyJHRBshRkQbIUZEGyFGRBsi
        RkQbIkZEGyJGRBshRkQbIUZEGyFGRBshRkQbIUZEGyFGRBshRkQbIUZEGyFGRBwjSUUdJEw8HSRMCR0k
        TAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwlSwAdJEwAHSRMfR4lT/sqM3H4LTd7+Cs1
        evgsNnr4LDZ5+Cw1ePgtNnn4LDZ6+Cs1evgsNnr4KzV6+Cs1evgrNXr4KzV6+Cw2evgtN3v4JC1h+R0k
        S+QdJEwrHSRMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHCVLAB8lUAAeJlCEKDFr/ygv
        Y/8rMmb/REZv/zc7av8rP3b/L0yD/yo8cv87Pmv/Skpy/zI4aP9BQ27/SElx/0hJcf9JSXH/Oz9s/ykw
        Zf8nMGf/JS1j7RshRi8dJEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcJUsAHyZSAB8n
        UoQwO4T/MDJa/0JAW//Cpo7/bmVu/z2Luv9SxPT/N2qU/5N/eP+fin//RkRb/7SbiP/Wtpb/1LSV/9e3
        lv+TgXv/MDBT/y82b/8rNHXtGR9BLx0kTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwl
        SwAfJlIAHydShDA6g/8uMVr/Tkph/9a2lv9hYHD/R6fX/1TJ+f8vVoD/TUph/1NYev9HR2P/1LSW/+jE
        nv/nw57/6saf/5uIf/8yMlX/MDZw/ys0dO0ZH0EvHSRMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAHCVLAB8mUgAfJ1KEMDqD/y0wWf9TTmL/0bGU/1Facv9Hqdj/OWuW/1lli/+gqMz/jZa7/zw/
        Xf90anD/em5y/3pucv+diYD/iHh4/zU0V/8wNnD/KzR07RkfQS8dJEwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAcJUsAHyZSAB8nUoQwOoP/LjFa/1BMYf/GqI//R1t5/zyHtf9ZY4n/kZi8/4aO
        s/85QWj/NG2Z/zNxn/9PTWP/m4iA/7Kaif9tY23/Ozha/zA2cP8rNHTtGR9BLx0kTAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABwlSwAfJlIAHydShDA6g/8yM1z/RkRe/7GXhv8/W3z/LlqG/zM6
        Yf8sMlf/Pz9a/2FYZv8+hbD/QZjF/3luc//qxp//27qZ/1BMYf9GP1//LzZv/y03dvA9Q105Jy5TAO/v
        5QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHCVLAB8mUgAfJ1KELzqD/zc3Xv89PFv/i3l2/z1f
        g/88g7D/MWmW/1lXaf/Cpo7/rZSE/zprlP89jLr/gHN1/+nFn/+4nov/Ozpa/09GY/8uNW//OUJ8/7a4
        ubD///gY7+/lAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcJUsAHyZSAB8nUoQvOoP/OThf/0Q/
        X/9JRFv/OWSM/1bQ//9DmMX/Nzte/1lVcP9XUWb/MlJ5/zqCsP+CdHb/6MSf/31wc/8/PF3/U0ll/y41
        b/85QXz/yMnH//Pz6Jfv7+UH7+/lAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwlSwAfJlIAHydShC86
        g/84OF//Vkto/yorUP8yY47/V9H//z+Ktv8wOob/QE67/z1Jrf8rQnj/N3mm/31ydv/OsJT/RUNd/1JI
        Z/9SSWX/LjVv/zlBfP/Iycf/8vHn9O/v5VHv7+UA7+/lAAAAAAAAAAAAAAAAAAAAAAAAAAAAHCVLAB8m
        UgAfJ1KELzqD/zg4X/9cUGv/Qjxc/zRmkv9X0f//O36r/y82Z/9FToL/OUSS/zFAh/80cp7/amdz/4Fz
        dP88Olz/XFBr/1JIZf8uNW//OUF8/8jJx//x8ef/7+/ltO/v5Qnv7+UAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAcJUsAHyZSAB8nUoQvOoP/ODhf/1xQa/9JQWD/NWeS/1fQ//83cp7/f4Wp/8XO7v9PV4X/LjmD/zZw
        nP83Smz/OThX/1NJZ/9cUGv/Ukhl/y41b/85QXz/yMnH//Hx5//v7+Xr7+/lMe/v5QAAAAAAAAAAAAAA
        AAAAAAAAAAAAABwlSwAfJlIAHydShC86g/84OF//XFBr/0tBYP80ZI7/U8f4/ztijP+qsdL/gouu/zc/
        af8oMHH/NGmV/zJlkf87N1n/XFBs/1xPa/9SSGX/LjVv/zlBfP/Iycf/8fHn/+/v5f7v7+Ve7+/lAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHCVLAB8mUgAfJ1KELzqD/zg4X/9cUGv/TUNi/zNchv9Pvu7/RmKL/4GH
        q/9iao//pq/R/2dtkv8vTXf/QpXD/y08Y/9LQ2L/XFBr/1JIZf8uNW//OUF8/8jJx//x8ef/7+/l/+/v
        5Xvv7+UA7+/lAAAAAAAAAAAAAAAAAAAAAAAcJUsAHyZSAB8nUoQvOoP/ODhf/1xPa/9RRmT/MVF6/065
        6f9DYIn/XmSJ/6Sszv/b5P//0tv7/4SLr/82YIv/LliD/ycqUP9ORmT/U0ll/y41b/85QXz/yMnH//Hx
        5//v7+X/7+/lge/v5QDv7+UAAAAAAAAAAAAAAAAAAAAAABwlSwAfJlIAHydShC86g/84OF//W09r/1ZK
        Z/8wRGv/TLXl/z1jjf+gpsn/z9j5/9Xe///W3///0dr6/2JulP8rVH//SlJy/z8/Yf9ORmP/LjVv/zlB
        fP/Iycf/8fHn/+/v5f/v7+Vx7+/lAOzs4wAAAAAAAAAAAAAAAAAAAAAAHCVLAB8mUgAfJ1KELzqD/zg4
        X/9bT2v/VUto/yozWf9IptT/OnWh/5edv//Z4v//1d7//9Xe///Z4v//kJi6/yhMd/9sd5L/aGuG/z86
        Wv8vNW//OUF8/8jJx//x8ef/7+/l+O/v5Uvv7+UAAAAAAAAAAAAAAAAAAAAAAAAAAAAcJUsAHyZSAB8n
        UoQvOoP/ODhf/1xQa/9NRWT/JitR/zx+qv9Go9H/VWKJ/8fP8P/Z4v//2OH//9ff/v9zfKH/L2SQ/2t5
        lP+anK7/NTRW/y81b/85QXz/yMnH//Hx5//v7+XZ7+/lHe/v5QAAAAAAAAAAAAAAAAAAAAAAAAAAABwl
        SwAfJlIAHydShC86g/84OF//XFBr/0hBYf9WWXf/Q16D/0245/88fKj/VGGH/5CWuv+jqsz/eoGl/zph
        iv8+kb7/c32X/6+xv/8yM1b/LzVv/zlBfP/Iycf/8fHn/+/v5Yvv7+UA7+/lAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAHCVLAB8mUgAfJ1KELzqD/zg4X/9cUGv/SUJh/2tvif+OkaX/N3Kf/1PI9/9GotH/OXai/zhr
        l/88ga7/UL3t/zqArf+Xmq3/pKa3/zQzVv8vNW//OUF8/8jJx//y8ufY7+/lJ+/v5QAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAcJUsAHyZSAB8nUoQvOoP/ODhf/1xPa/9TSWb/Skxs/9TV3f9udpH/N3Wi/0++
        7/9Wz///Vc7//1LE9f8+jr3/TWCB/9jZ3/9wdI3/PTla/y81b/85Qn3/xcbF7/b26ljv7+UA7+/lAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABwlSwAfJlIAHydShC86g/84OF//W09r/1tPa/88Olz/k5eq/+3t
        8P+KjqP/RF+D/zlqlP85a5b/QWCG/3N6lP/a2uD/xMbQ/z4/Yf9NRWL/LzVv/zU+evqUl59u////Au/v
        5QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHCVLAB8mUgAfJ1KELzqD/zg4X/9bT2v/W09r/1RJ
        Z/89P2H/rrC///z8/P/l5en/xcTO/8PDzf/g3+X//fz9/9PV3P9PU3L/SkNi/1NJZf8vNm//KzR07Rkg
        QS8dJEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcJUsAHyZSAB8nUoQwOoT/NjZd/1ZL
        Z/9WS2f/V0tn/0pDYf82OVv/e3+W/8zN1f/s7O//7+/x/9na4P+Xm6z/QUVl/0E8XP9XTGj/TUVh/y41
        b/8rNHXtGR9BLx0kTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwlSwAfJVAAHiZQhCgx
        bP8oL2P/MDVp/zA1af8wNWn/MTZp/ysyZv8jLGL/MTlt/0ZOfv9KUYD/OEBy/yUtY/8oL2T/MDVp/zA1
        af8uNGf/JzBn/yUtY+0bIUYvHSRMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHCVLAB0k
        TAAdJEx9HiVP+yozcfgtN3z4LTd7+C03e/gtN3v4LTd7+C03e/gtNnr4KzV5+Cs1efgsNnr4LTd7+C03
        e/gtN3v4LTd7+C03e/gkLWH5HSRL5B0kTCsdJEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAcI0wAHSRMAB0kTB4dJExEGyJHRBshRkQbIUZEGyFGRBshRkQbIUZEGyFGRBshRkQbIUZEGyFGRBsh
        RkQbIUZEGyFGRBshRkQbIUZEGyFGRBwjSUUdJEw8HSRMCR0kTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////wAAB/8AAAf/AAAH/wAAB/8AAAf/AAAH/wAAB/8AAAf/AA
        AD/wAAAf8AAAH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAH/AAAB/wAAA/8AAAP/AA
        AH/wAAB/8AAAf/AAAH/wAAB///////////8=
</value>
  </data>
</root>